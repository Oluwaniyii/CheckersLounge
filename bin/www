#!/usr/bin/env node

"use strict";

const http = require("http");
const config = require("config");
const winston = require("../src/utils/logger/winston");
const app = require("../src/app");
const socketio = require("../src/socketio");


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const value = parseInt(val, 10);

  if (Number.isNaN(value)) {
    // named pipe
    return val;
  }

  if (value >= 0) {
    // port number
    return value;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || config.get("app.port"));
app.set("port", port);

/**
 * Create HTTP httpServer.
 */
const httpServer = http.createServer(app);

/**
 * Plug-in socketio
 * */
socketio(httpServer);

/**
 * Event listener for HTTP httpServer "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      winston.error(`${bind} requires elevated privileges`);
      // eslint-disable-next-line no-process-exit
      process.exit(1);
      // eslint-disable-next-line no-unreachable
      break;
    case "EADDRINUSE":
      winston.error(`${bind} is already in use`);
      // eslint-disable-next-line no-process-exit
      process.exit(1);
      // eslint-disable-next-line no-unreachable
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP httpServer "listening" event.
 */
function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `pipe ${addr.port}`;
  winston.info(`Listening on ${bind} in ${app.get("env")} environment`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
httpServer.on("error", onError);
httpServer.on("listening", onListening);

httpServer.listen(port);

